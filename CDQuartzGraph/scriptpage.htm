<html>
<head>
<script type="text/javascript">
/**

 The graph bindings script is used to interpret a json object
 and manipulate an existing graph.
 
 The JSON object is used to specify the graph data structure.

**/

var graph = window.Graph;

/**
 Add a node to the graph.
 **/
function addNodeWithName(name) {
	graph.addNodeWithName(name);
}

/**
 Connect two nodes togethor.
 **/
function connectNodeToTarget(name, target) {
	graph.connectNodeToTarget(name, target);
}

/**
 Create a shape instance.
 **/
function makeShapeInstance() {
	return graph.makeShapeInstance();
}

/**
 Set the shape given the supplied name.
 **/
function setShapeForName(shape, name) {
	graph.setShapeForName(shape, name);
}

/**
 Use the json string to generate the graph.
 **/
function parseFromJSON(jsonString) {
	parseGraphObject(window.JSON.parse(jsonString));
}

/**
 Process the ecmascript object using 
 **/
function parseGraphObject(graphObject) {
	
	processGraphNodes(graphObject);
	
}

/**
 Add all nodes defined in the graph object.
 **/
function processGraphNodes(graphObject) {
	
	for(var i = 0; i < graphObject.nodes.length; i++) {
		var obj = graphObject.nodes[i];
		if (typeof(obj.node) == 'undefined')
			continue;
		
		graph.addNodeWithName(obj.node);
		
		var shape = graph.makeShapeInstance();
		
		if (typeof(obj.color) != 'undefined') {
			graph.setColorForShape(obj.color, shape);
		} else {
			graph.setColorForShape("rgb(1.0, 1.0, 1.0)", shape);
		}
		
		if (typeof(obj.outlineColor) != 'undefined') {
			graph.setOutlineColorForShape(obj.outlineColor, shape);
		} else {
			graph.setOutlineColorForShape("rgb(1.0, 1.0, 1.0)", shape);	
		}
		
		if (typeof(obj.width) != 'undefined') {
			graph.setWidthForShape(parseFloat(obj.width), shape);
		} else {
			graph.setWidthForShape(100.0, shape);
		}
		
		if (typeof(obj.height) != 'undefined') {
			graph.setHeightForShape(parseFloat(obj.height), shape);
		} else {
			graph.setHeightForShape(50.0, shape);
		}
		
		
		if (typeof(obj.x) != 'undefined') {
			graph.setXForShape(parseFloat(obj.x), shape);
		} else {
			graph.setXForShape(50.0, shape);
		}
		
		if (typeof(obj.y) != 'undefined') {
			graph.setYForShape(parseFloat(obj.y), shape);
		} else {
			graph.setYForShape(50.0, shape);
		}
		
		if (typeof(obj.shapeType) != 'undefined') {
			graph.setTypeNameForShape(obj.shapeType, shape);
		} else {
			graph.setTypeNameForShape('CURVED_RECT', shape);	
		}
		
		graph.setShapeForName(shape, obj.node);
		
	}
}


/**
 Connect the edges.
 **/
function processEdges(graphObject) {

	for(var i = 0; i<graphObject.edges.length; i++) {
		var edge = graphObject.edges[i];
		
		graphObject.connectNodeToTarget(edge.from, edge.to);
		
	}
	
}

</script>
</head>
<body bgcolor="#cacaca">
</body>
</html>